/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/v2/product/{barcode}": {
    /**
     * Get information for a specific product by barcode 
     * @description A product can be fetched via its unique barcode.
     * It returns all the details of that product response.
     */
    get: operations["get-product-by-barcode"];
  };
  "/api/v2/product/{barcode}?fields=knowledge_panels": {
    /**
     * Get Knowledge panels for a specific product by barcode
     * (special case of get product)
     *  
     * @description Knowledge panels gives high leve informations about a product,
     * ready to display.
     * This is used by open food facts website,
     * and by the official mobile application
     */
    get: operations["get-product-by-barcode-knowledge-panels"];
  };
  "/cgi/product_image_upload.pl": {
    /**
     * Add a Photo to an Existing Product 
     * @description Photos are source and proof of data.
     * The first photo uploaded for a product is
     * auto-selected as the product’s “front” photo.'
     */
    post: operations["get-cgi-product_image_upload.pl"];
  };
  "/cgi/ingredients.pl": {
    /**
     * Performing OCR on a Product 
     * @description Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.
     */
    get: operations["get-cgi-ingredients.pl"];
  };
  "/cgi/product_image_crop.pl": {
    /**
     * Rotate A Photo 
     * @description Although we recommend rotating photos manually and uploading a new version of the image,
     * the OFF API allows you to make api calls to automate this process.
     * You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.
     */
    get: operations["get-cgi-product_image_crop.pl"];
    /**
     * Crop A Photo 
     * @description Cropping is only relevant for editing existing products.
     * You cannot crop an image the first time you upload it to the system.
     */
    post: operations["post-cgi-product_image_crop.pl"];
  };
  "/cgi/product_image_unselect.pl": {
    /** Unselect A Photo */
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": external["requestBodies/unselect_a_photo.yaml"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /**
               * @description status of the unselect operation 
               * @example status ok
               */
              status?: string;
              /**
               * @description status code of the operation 
               * @example 0
               */
              status_code?: number;
              /**
               * @description image field that was unselected 
               * @example front_fr
               */
              imagefield?: string;
            };
          };
        };
      };
    };
  };
  "/cgi/product_jqm2.pl": {
    /**
     * Add or Edit A Product 
     * @description If the barcode exists then you will be editing the existing product,
     * However if it doesn''t you will be creating a new product with that unique barcode,
     * and adding properties to the product.
     */
    post: operations["post-cgi-product_jqm2.pl"];
  };
  "/api/v2/search": {
    /**
     * Search for Products 
     * @description Search request allows you to get the nutritional data of products that match your search criteria.
     * It allows you create many custom APIs for your use case.
     * If the search query parameter has 2 possible values, they are seperated by a comma(,).
     * When filtering via a parameter that has different language codes like `fr`, `de` or `en`, specify the language code in the parameter name e.g `categories_tags_en`
     */
    get: operations["get-search"];
  };
  "/cgi/suggest.pl": {
    /**
     * Get Suggestions to Aid Adding/Editing Products 
     * @description For example , Dave is looking for packaging_shapes that contain the term "fe",
     * all packaging_shapes containing "fe" will be returned.
     * This is useful if you have a search in your application,
     * for a specific product field.
     */
    get: operations["get-cgi-suggest.pl"];
  };
  "/api/v2/product/{barcode}?fields=images": {
    /**
     * Get Images for a specific product by barcode (special case of get product) 
     * @description Images ensure the reliability of Open Food Facts data. It provides a primary source and proof of all the structured data. You may therefore want to display it along the structured information.
     */
    get: operations["get-api-v2-product-barcode-?fields=images"];
    parameters: {
      path: {
        barcode: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Product: external["schemas/product.yaml"];
  };
  responses: never;
  parameters: {
    id: string;
    /** @description Barcode of the product */
    code: string;
    process_image: string;
    ocr_engine: string;
    imgid: string;
    angle: string;
    /**
     * @description The allowed values  used to sort/order the search results.
     * 
     * * `product_name` sorts on name
     * * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)
     * * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product
     * * `created_t`, `last_modified_t`, are about creation and modification dates
     * * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)
     */
    sort_by?: "product_name" | "last_modified_t" | "scans_n" | "unique_scans_n" | "created_t" | "completeness" | "popularity_key" | "nutriscore_score" | "nova_score" | "nothing" | "ecoscore_score";
    /**
     * @description The fields to be returned from the product object can also be limited.
     * If not specified, it returns the entire product object response.
     */
    fields?: string;
    tagtype?: string;
    term?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export interface external {
  "requestBodies/add_or_edit_a_product.yaml": {
    /**
     * @description The barcode of the product to be added or edited 
     * @example 0074570036004
     */
    code: string;
    /**
     * @description A valid username. 
     * @example myusername
     */
    user_id: string;
    /**
     * @description A valid corresponding password. 
     * @example mypassword
     */
    password: string;
    /**
     * @description The brands of the product (comma separated list of values). 
     * @example Häagen-Dazs,General-mills
     */
    brands?: unknown;
    /**
     * @description The labels of the product (comma separated list of values). 
     * @example Kosher,Ferroro
     */
    labels?: unknown;
    /**
     * @description The categories of the product (comma separated list of values). 
     * @example Desserts,Frozen foods
     */
    categories?: unknown;
    /**
     * @description Packaging type, format, material.
     * The [v3 API documentation](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-v3/#operation/post-api-v3-product-barcode)
     * has a more structured data for `packaging`.
     *  
     * @example Frozen
     */
    packaging?: string;
  }
  "requestBodies/add_photo_to_existing_product.yaml": {
    /**
     * @description Barcode of the product
     *  
     * @example 3017620422003
     */
    code: string;
    /**
     * @description Indicates the type of the image and the corresponding language. It should
     * be in the format `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one
     * of `front|ingredients|nutrition|packaging|other` and `LANG` is the 2
     * letter language code. Use `other` if you don't want the image to be
     * selected. Note that the first image of a product is always selected as front
     * picture.
     *  
     * @example front_en
     */
    imagefield: string;
    /**
     * Format: binary 
     * @description This field must contain image binary content.
     * The format and extension must be one of gif|jpeg|jpg|png|heic.            
     * This field is dynamic and dependent on the value of imagefield in the
     * request body. It wil be imgupload_the value of the imagefield stated
     * earlier. For example, if `imagefield=front_en`, the name of this field
     * should be `imageupload_front_en`.
     */
    imgupload_front_en: string;
  }
  "requestBodies/crop_a_photo.yaml": {
    /**
     * @description Barcode of the product. 
     * @example 04963406
     */
    code?: string;
    /**
     * @description identifier of the image to select, it should be a number 
     * @example 2
     */
    imgid?: number;
    /**
     * @description identifier of the selected image field, should be in the format
     * `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one of
     * `front|ingredients|nutrition|packaging` and `LANG` is the 2 letter
     * language code.
     * Note that if you select an image for the main language of the product (ex:
     * `ingredients_it` if `it` is the main language), this image will be
     * displayed on Product Opener for all languages (ex: on
     * `https://fr.openfoodfacts.org`, unless `ingredients_fr` exists).
     *  
     * @example front_en
     */
    id?: string;
    /**
     * @description X origin coordinate of the crop, it must be lower than x2 
     * @example 0
     */
    x1?: number;
    /**
     * @description Y origin coordinate of the crop, it must be lower than y2 
     * @example 0
     */
    y1?: number;
    /**
     * @description X end coordinate of the crop, it must be higher than x1 
     * @example 145
     */
    x2?: number;
    /**
     * @description Y end coordinate of the crop, it must be higher than y1 
     * @example 145
     */
    y2?: number;
    /**
     * @description angle of the rotation to apply on the selected image.
     * passing `90` as value rotate the image 90 degrees counter-clockwise.
     *  
     * @example 0
     */
    angle?: number;
    /**
     * @description whether the selected image should be normalized using ImageMagick 
     * @example false 
     * @enum {string}
     */
    normalize?: "true" | "false";
    /**
     * @description whether the source image should be white magiced (background removal) using
     * ImageMagick.
     *  
     * @default false 
     * @enum {string}
     */
    white_magic?: "true" | "false";
    required?: [code, imgid, id];
  }
  "requestBodies/unselect_a_photo.yaml": {
    /**
     * @description code of the product 
     * @example 4251105501381
     */
    code?: string;
    /**
     * @description image field (image id) of the photo to unselect 
     * @example front_fr
     */
    id?: string;
  }
  "responses/add_or_edit_a_product.yaml": {
    /** @example fields saved */
    status_verbose?: string;
    /** @example 1 */
    status?: number;
  }
  "responses/add_photo_to_existing_product.yaml": {
    files?: ({
        /** @example /product/3017620422003/nutella-ferrero */
        url?: string;
        /** @example */
        filename?: string;
        /** @example Nutella - Ferrero - 400g */
        name?: string;
        /** @example /images/products/301/762/042/2003/123.100.jpg */
        thumbnailUrl?: string;
        /** @example 3017620422003 */
        code?: string;
      })[];
    image?: {
      /** @example 123.100.jpg */
      thumb_url?: string;
      /** @example 123 */
      imgid?: number;
      /** @example 123.400.jpg */
      crop_url?: string;
    };
    /** @example 123 */
    imgid?: number;
    /** @example status ok */
    status?: string;
    /** @example front_en */
    imagefield?: string;
    /** @example 3017620422003 */
    code?: string;
  }
  "responses/get_product_by_barcode_base.yaml": {
    /**
     * @description Barcode of the product
     * (can be EAN-13 or internal codes for some food stores).
     * For products without a barcode, Open Food Facts assigns a 
     * number starting with the 200 reserved prefix.
     */
    code?: string;
    status?: number;
    status_verbose?: string;
  }
  "responses/get_product_by_barcode.yaml": external["responses/get_product_by_barcode_base.yaml"] & {
    product?: external["schemas/product.yaml"]["Product"];
  }
  "responses/ocr_on_product.yaml": {
    /** @example 1 */
    status?: number;
  }
  "responses/rotate_a_photo.yaml": {
    /** @example status ok */
    status?: string;
    /** @example nutrition_fr */
    imagefield?: string;
    image?: {
      /** @example nutrition_fr.67.400.jpg */
      display_url?: string;
    };
  }
  "responses/search_for_products.yaml": {
    /** @example 2701 */
    count?: number;
    /** @example 1 */
    page?: number;
    /** @example 24 */
    page_count?: number;
    /** @example 24 */
    page_size?: number;
    products?: (external["schemas/product.yaml"])[];
    /** @example 0 */
    skip?: number;
  }
  "schemas/image.yaml": {
    sizes?: {
      100?: {
        h?: number;
        w?: number;
      };
      400?: {
        h?: number;
        w?: number;
      };
      full?: {
        h?: number;
        w?: number;
      };
    };
    uploaded_t?: string;
    uploader?: string;
  }
  "schemas/images/image.yaml": {
    /**
     * @description The available image sizes for the product (both reduced and full). 
     * The reduced images are the ones with numbers as the key( 100, 200 etc) 
     * while the full images have `full` as the key.
     */
    sizes?: {
      100?: external["schemas/images/properties/image_size.yaml"];
      400?: external["schemas/images/properties/image_size.yaml"];
      full?: external["schemas/images/properties/image_size.yaml"];
    };
    /**
     * @description The time the image was uploaded.
     *  
     * @example 1457680652
     */
    uploaded_t?: string;
    /**
     * @description The contributor that uploaded the image.
     *  
     * @example openfoodfacts-contributors
     */
    uploader?: string;
  }
  "schemas/images/properties/image_size.yaml": {
    /**
     * @description The height of the reduced/full image in pixels.
     *  
     * @example 400
     */
    h?: number;
    /**
     * @description The width of the reduced/full image in pixels.
     *  
     * @example 255
     */
    w?: number;
  }
  "schemas/images/selected_image.yaml": {
    /**
     * @description The angle of the image rotation (if it was rotated). 
     * @example 0
     */
    angle?: number;
    /** @example full */
    coordinates_image_size?: string;
    /** @example 0x0--1--1 */
    geometry?: string;
    /**
     * @description The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image. 
     * @example 121
     */
    imgid?: string;
    /**
     * @description Normalize colors. 
     * @example null
     */
    normalize?: null;
    /** @example 420 */
    rev?: string;
    /**
     * @description The available image sizes for the product (both reduced and full). 
     * The reduced images are the ones with numbers as the key( 100, 200 etc)
     * while the full images have `full` as the key.
     */
    sizes?: {
      100?: external["schemas/images/properties/image_size.yaml"];
      200?: external["schemas/images/properties/image_size.yaml"];
      400?: external["schemas/images/properties/image_size.yaml"];
      full?: external["schemas/images/properties/image_size.yaml"];
    };
    /**
     * @description Photo on white background : Try to remove the background.
     *  
     * @example null
     */
    white_magic?: null;
    /** @example -1 */
    x1?: string;
    /** @example -1 */
    x2?: string;
    /** @example -1 */
    y1?: string;
    /** @example -1 */
    y2?: string;
  }
  "schemas/ingredient.yaml": ({
      id?: string;
      ingredients?: external["schemas/ingredient.yaml"];
      percent?: number;
      percent_estimate?: OneOf<[number, number]>;
      percent_max?: OneOf<[number, number]>;
      percent_min?: number;
      text?: string;
      vegan?: string;
      vegetarian?: string;
    })[]
  "schemas/knowledge_panels/elements/element.yaml": {
    /**
     * @description The type of the included element object.
     * The type also indicates which field contains the included element object.
     * e.g. if the type is "text", the included element object will be in the "text_element" field.
     * 
     * Note that in the future, new type of element may be added,
     * so your code should ignore unrecognized types, and unknown properties.
     * 
     * TODO: add Map type
     *  
     * @enum {unknown}
     */
    type: "text" | "image" | "action" | "panel" | "panel_group" | "table";
    text_element?: external["schemas/knowledge_panels/elements/text_element.yaml"];
    image_element?: external["schemas/knowledge_panels/elements/image_element.yaml"];
    action_element?: string;
    panel_element?: external["schemas/knowledge_panels/elements/panel_element.yaml"];
    panel_group_element?: external["schemas/knowledge_panels/elements/panel_group_element.yaml"];
    table_element?: external["schemas/knowledge_panels/elements/table_element.yaml"];
  }
  "schemas/knowledge_panels/elements/image_element.yaml": {
    /** @description full URL of the image */
    url?: string;
    /**
     * @description Width of the image.
     * 
     * This is just a suggestion coming from the server, 
     * the client may choose to use its own dimensions for the image.
     */
    width?: number;
    /**
     * @description Height of the image.
     * 
     * This is just a suggestion coming from the server,
     * the client may choose to use its own dimensions for the image.
     */
    height?: number;
    /** @description Alt Text of the image. */
    alt_text?: string;
  }
  "schemas/knowledge_panels/elements/panel_element.yaml": {
    /** @description The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field. */
    panel_id?: string;
  }
  "schemas/knowledge_panels/elements/panel_group_element.yaml": {
    title?: string;
    /** @description The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field. */
    panel_ids?: (string)[];
  }
  "schemas/knowledge_panels/elements/table_element.yaml": {
    /** @description An id for the table. */
    id?: string;
    /** @description Title of the column. */
    title?: string;
    rows?: string;
    columns?: ({
        type?: string;
        text?: string;
        text_for_small_screens?: string;
        style?: string;
        column_group_id?: string;
        shown_by_default?: boolean;
      })[];
  }
  "schemas/knowledge_panels/elements/text_element.yaml": {
    /**
     * @description the type of text, might influence the way you display it.
     *  
     * @enum {string}
     */
    type?: "summary" | "warning" | "notes";
    /** @description Text to display in HTML format. */
    html?: string;
    /** @description Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain "Polonais" (French for "Polish"). Only set for specific fields such as the list of ingredients of a product. */
    language?: string;
    /** @description 2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product. */
    lc?: string;
    /** @description id of the field used to edit this text in the product edit API. */
    edit_field_id?: string;
    /** @description Type of the product field. */
    edit_field_type?: string;
    /** @description Current value of the product field. This may differ from the html field which can contain extra formating. */
    edit_field_value?: string;
    /**
     * @description Link to the source 
     * @example https://en.wikipedia.org/wiki/Sodium acetate
     */
    source_url?: string;
    /**
     * @description name of the source 
     * @example Wikipedia
     */
    source_text?: string;
    /**
     * @description Source locale name 
     * @example en
     */
    source_lc?: string;
    /**
     * @description Human readable source locale name 
     * @example English
     */
    source_language?: string;
  }
  "schemas/knowledge_panels/elements/title_element.yaml": {
    title?: string;
    /**
     * @description Indicates that the panel corresponds to a A to E grade such as the Nutri-Score of the Eco-Score. 
     * @enum {string}
     */
    grade?: "a" | "b" | "c" | "d" | "e" | "unknown";
    icon_url?: string;
    icon_color_from_evaluation?: string;
    /** @description If set to "small", the icon should be displayed at a small size. */
    icon_size?: string;
    /**
     * @description Used to indicate a special type for the title, such as "grade" for Nutri-Score and Eco-Score. 
     * @example grade
     */
    type?: string;
  }
  "schemas/knowledge_panels/panel.yaml": {
    /** @description Type of the panel. If set to "card", the panel and its sub-panels should be displayed in a card. If set to "inline", the panel should have its content always displayed. */
    type?: string;
    /** @description If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements. */
    expanded?: boolean;
    /** @description If set to "large", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it. */
    expand_for?: string;
    title_element?: external["schemas/knowledge_panels/elements/title_element.yaml"];
    /** @description An ordered list of elements to display in the content of the panel. */
    elements?: (external["schemas/knowledge_panels/elements/element.yaml"])[];
    /**
     * @description a message level, as levels we use in log.
     * It might help theming the panel visualy
     *  
     * @example info
     */
    level?: string;
    /**
     * @description size is either empty (normal display) 
     * or small to indicate a panel that should have a smaller font size
     *  
     * @example small 
     * @enum {string}
     */
    size?: "small";
    topics?: (string)[];
  }
  "schemas/knowledge_panels/panels.yaml": {
    readonly additionalProperties?: external["schemas/knowledge_panels/panel.yaml"];
  }
  "schemas/packagings/material.yaml": {
    /** @description Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon. */
    id?: string;
    /** @description Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon. */
    lc_name?: string;
  }
  "schemas/packagings/packaging_component.yaml": {
    /** @description umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles) */
    number_of_units?: number;
    shape?: external["schemas/packagings/shape.yaml"];
    material?: external["schemas/packagings/material.yaml"];
    recycling?: external["schemas/packagings/recycling.yaml"];
    /** @description Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle) */
    quantity_per_unit?: string;
    /** @description Value parsed from the quantity field. */
    quantity_per_unit_value?: number;
    /** @description Unit parsed and normalized from the quantity field. */
    quantity_per_unit_unit?: string;
    /** @description Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component). */
    weight_specified?: number;
    /** @description Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component). */
    weight_measured?: number;
    /** @description Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component). */
    weight_estimated?: number;
    /** @description Weight of one unit of the empty packaging component. */
    weight?: number;
    /** @description Indicates which field was used to populate the "weight" field. Either "specified", "measured", or "estimated" */
    weight_source_id?: string;
  }
  "schemas/packagings/packagings_complete.yaml": number
  "schemas/packagings/packagings.yaml": readonly (external["schemas/packagings/packaging_component.yaml"])[]
  "schemas/packagings/recycling.yaml": {
    /** @description Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon. */
    id?: string;
    /** @description Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon. */
    lc_name?: string;
  }
  "schemas/packagings/shape.yaml": {
    /** @description Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon. */
    id?: string;
    /** @description Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon. */
    lc_name?: string;
  }
  "schemas/product.yaml": unknown
  "schemas/tags_parameters.yaml": {
    /**
     * @description The additives_tags in english of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/additives) has a list of possible values for `additives`.
     */
    additives_tags?: unknown;
    /**
     * @description The allergens_tags in english of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/allergens) has a list of possible values for `allergens`.
     */
    allergens_tags?: unknown;
    /**
     * @description The brands_tags of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/brands) has a list of possible values for `brands`.
     */
    brands_tags?: unknown;
    /**
     * @description The category of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/categories) has a list of possible values for `categories`.
     */
    categories_tags?: unknown;
    /**
     * @description The countries_tags_en of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/countries) shows a list of possible values for `countries`.
     */
    countries_tags?: unknown;
    /** @description The emb_codes_tags of product(s) you are searching for. */
    emb_codes_tags?: unknown;
    /**
     * @description The labels_tags in english of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/labels) has a list of possible values for `labels`.
     */
    labels_tags?: unknown;
    /**
     * @description The manufacturing_places_tags of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/manufacturing-places) has a list of possible values for `manufacturing-places`.
     */
    manufacturing_places_tags?: unknown;
    /**
     * @description The nutrition_grades_tags of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/nutrition-grades) has a list of possible values for `nutrition-grades`.
     */
    nutrition_grades_tags?: unknown;
    /** @description The origins_tags of product(s) you are searching for. */
    origins_tags?: unknown;
    /**
     * @description The packaging_tag in german of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/packaging) has a list of possible values for `packaging`.
     */
    packaging_tags?: unknown;
    /** @description The purchase_places_tags of product(s) you are searching for. */
    purchase_places_tags?: unknown;
    /**
     * @description The states_tags in english of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/states) has a list of possible values for `states`.
     */
    states_tags?: unknown;
    /** @description The stores_tags of product(s) you are searching for. */
    stores_tags?: unknown;
    /**
     * @description The traces_tags of product(s) you are searching for.
     * The [OFF App](https://world.openfoodfacts.org/traces) shows a list of possible values for `traces`.
     */
    traces_tags?: unknown;
    /** @description You can add a language code to a specific tag to query it in a specific language */
    tag_name_with_language_code?: unknown;
  }
}

export interface operations {

  /**
   * Get information for a specific product by barcode 
   * @description A product can be fetched via its unique barcode.
   * It returns all the details of that product response.
   */
  "get-product-by-barcode": {
    parameters: {
      path: {
        /** @description The barcode of the product to be fetched */
        barcode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/get_product_by_barcode.yaml"];
        };
      };
    };
  };
  /**
   * Get Knowledge panels for a specific product by barcode
   * (special case of get product)
   *  
   * @description Knowledge panels gives high leve informations about a product,
   * ready to display.
   * This is used by open food facts website,
   * and by the official mobile application
   */
  "get-product-by-barcode-knowledge-panels": {
    parameters: {
      path: {
        /** @description The barcode of the product to be fetched */
        barcode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/get_product_by_barcode_base.yaml"] & {
            product?: {
              knowledge_panels?: external["schemas/knowledge_panels/panels.yaml"];
            };
          };
        };
      };
    };
  };
  /**
   * Add a Photo to an Existing Product 
   * @description Photos are source and proof of data.
   * The first photo uploaded for a product is
   * auto-selected as the product’s “front” photo.'
   */
  "get-cgi-product_image_upload.pl": {
    requestBody?: {
      content: {
        "multipart/form-data": external["requestBodies/add_photo_to_existing_product.yaml"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/add_photo_to_existing_product.yaml"];
        };
      };
    };
  };
  /**
   * Performing OCR on a Product 
   * @description Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.
   */
  "get-cgi-ingredients.pl": {
    parameters: {
      query: {
        id: components["parameters"]["id"];
        code: components["parameters"]["code"];
        process_image: components["parameters"]["process_image"];
        ocr_engine: components["parameters"]["ocr_engine"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/ocr_on_product.yaml"];
        };
      };
    };
  };
  /**
   * Rotate A Photo 
   * @description Although we recommend rotating photos manually and uploading a new version of the image,
   * the OFF API allows you to make api calls to automate this process.
   * You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.
   */
  "get-cgi-product_image_crop.pl": {
    parameters: {
      query: {
        code: components["parameters"]["code"];
        id: components["parameters"]["id"];
        imgid: components["parameters"]["imgid"];
        angle: components["parameters"]["angle"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/rotate_a_photo.yaml"];
        };
      };
    };
  };
  /**
   * Crop A Photo 
   * @description Cropping is only relevant for editing existing products.
   * You cannot crop an image the first time you upload it to the system.
   */
  "post-cgi-product_image_crop.pl": {
    requestBody?: {
      content: {
        "multipart/form-data": external["requestBodies/crop_a_photo.yaml"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Add or Edit A Product 
   * @description If the barcode exists then you will be editing the existing product,
   * However if it doesn''t you will be creating a new product with that unique barcode,
   * and adding properties to the product.
   */
  "post-cgi-product_jqm2.pl": {
    requestBody?: {
      content: {
        "multipart/form-data": external["requestBodies/add_or_edit_a_product.yaml"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/add_or_edit_a_product.yaml"];
        };
      };
    };
  };
  /**
   * Search for Products 
   * @description Search request allows you to get the nutritional data of products that match your search criteria.
   * It allows you create many custom APIs for your use case.
   * If the search query parameter has 2 possible values, they are seperated by a comma(,).
   * When filtering via a parameter that has different language codes like `fr`, `de` or `en`, specify the language code in the parameter name e.g `categories_tags_en`
   */
  "get-search": {
    parameters: {
      query: {
        fields?: components["parameters"]["fields"];
        sort_by?: components["parameters"]["sort_by"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": external["responses/search_for_products.yaml"];
        };
      };
    };
  };
  /**
   * Get Suggestions to Aid Adding/Editing Products 
   * @description For example , Dave is looking for packaging_shapes that contain the term "fe",
   * all packaging_shapes containing "fe" will be returned.
   * This is useful if you have a search in your application,
   * for a specific product field.
   */
  "get-cgi-suggest.pl": {
    parameters: {
      query: {
        tagtype?: components["parameters"]["tagtype"];
        term?: components["parameters"]["term"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (unknown)[];
        };
      };
    };
  };
  /**
   * Get Images for a specific product by barcode (special case of get product) 
   * @description Images ensure the reliability of Open Food Facts data. It provides a primary source and proof of all the structured data. You may therefore want to display it along the structured information.
   */
  "get-api-v2-product-barcode-?fields=images": {
    parameters: {
      path: {
        barcode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            /** @example 3017620422003 */
            code?: string;
            product?: {
              images?: Record<string, never>;
            };
            /** @example 1 */
            status?: number;
            /** @example product found */
            status_verbose?: string;
          };
        };
      };
    };
  };
}
